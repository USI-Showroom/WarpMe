cmake_minimum_required(VERSION 2.8)

project(BarycentricMapping)


IF(WIN32)
	SET(CMAKE_PREFIX_PATH "C:\\Qt\\5.7\\msvc2015")
ENDIF()


###########################
# Sources
file(GLOB_RECURSE BARY_MAPPING_SOURCES "src/*.cpp")
file(GLOB_RECURSE BARY_MAPPING_HEADERS "src/*.hpp")

file(GLOB_RECURSE BARY_MAPPING_QT_SRC_HEADERS "src/qt/*.hpp")
file(GLOB_RECURSE BARY_MAPPING_UIS "src/qt/*.ui")
file(GLOB_RECURSE BARY_MAPPING_RESOURCES "src/resource/*.qrc")

SET(BARY_MAPPING_MAIN "src/main.cpp")
SET(BARY_MAPPING_INCLUDE "src" "src/qt" "src/geom")
#########################

#########################
# Libs
FIND_PACKAGE(Qt5 COMPONENTS Core Gui Xml OpenGL Widgets Multimedia REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Core_DEFINITIONS})
SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5Core_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Gui_DEFINITIONS})
SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5Gui_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Xml_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Xml_DEFINITIONS})
SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5Xml_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5OpenGL_DEFINITIONS})
SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5OpenGL_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Widgets_DEFINITIONS})
SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5Widgets_LIBRARIES})

INCLUDE_DIRECTORIES(${Qt5Multimedia_INCLUDE_DIRS})
ADD_DEFINITIONS(${Qt5Multimedia_DEFINITIONS})
SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5Multimedia_LIBRARIES})


IF(WIN32)
    FIND_PACKAGE(Qt5 COMPONENTS Winextras REQUIRED) 

    INCLUDE_DIRECTORIES(${Qt5Winextras_INCLUDE_DIRS})
    ADD_DEFINITIONS(${Qt5Winextras_DEFINITIONS})
    SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES}; ${Qt5Winextras_LIBRARIES})

    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOMINMAX")
ELSE()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNO_KINECT")
ENDIF()

FIND_PACKAGE(OpenGL REQUIRED)
IF(OPENGL_FOUND)         
    SET(BARY_MAPPING_LINK_LIBRARIES ${BARY_MAPPING_LINK_LIBRARIES} ${OPENGL_LIBRARIES})   
    INCLUDE_DIRECTORIES(${QT_QTOPENGL_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR} )
ELSE()
    message(FATAL_ERROR "OpenGl not found!")
ENDIF()
#########################

#########################
# QT
set(CMAKE_INCLUDE_CURRENT_DIR ON)
SET(QT_USE_QTXML TRUE)
SET(QT_USE_QTOPENGL TRUE)

QT5_WRAP_CPP(BARY_MAPPING_HEADERS_MOC ${BARY_MAPPING_QT_SRC_HEADERS})  
QT5_WRAP_UI(BARY_MAPPING_FORMS_HEADERS ${BARY_MAPPING_UIS})  
QT5_ADD_RESOURCES(BARY_MAPPING_RESOURCES_RCC ${BARY_MAPPING_RESOURCES}) 
######################### 



set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall  -std=c++11 -g")

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

IF(APPLE)
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_LIBCPP_DEBUG=0")
ENDIF()


INCLUDE_DIRECTORIES(${BARY_MAPPING_INCLUDE})

SET(BARY_MAPPING_SOURCES ${BARY_MAPPING_MAIN}; ${BARY_MAPPING_SOURCES}; ${VESTIGE_RESOURCES_RCC})


add_executable(BarycentricMapping ${BARY_MAPPING_SOURCES} ${BARY_MAPPING_HEADERS_MOC} ${BARY_MAPPING_FORMS_HEADERS} ${BARY_MAPPING_HEADERS} ${BARY_MAPPING_RESOURCES_RCC})
TARGET_LINK_LIBRARIES(BarycentricMapping ${BARY_MAPPING_LINK_LIBRARIES})


